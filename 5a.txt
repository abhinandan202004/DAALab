
import java.util.*;

public class TopologicalSort {

    private int V; // Number of vertices
    private List<Integer> adjList[]; // Adjacency list

    @SuppressWarnings("unchecked") // Suppress unchecked cast warning for generic array creation
    public TopologicalSort(int v) {
        V = v;
        adjList = new LinkedList[v];
        for (int i = 0; i < v; ++i) {
            adjList[i] = new LinkedList<>();
        }
    }

    // Add edge to the graph
    private void addEdge(int v, int w) {
        adjList[v].add(w);
    }

    // Recursive utility function to perform topological sort
    private void topologicalSortUtil(int v, boolean visited[], Stack<Integer> stack) {
        visited[v] = true; // Mark the current node as visited

        for (Integer neighbor : adjList[v]) { // Recur for all the vertices adjacent to this vertex
            if (!visited[neighbor]) {
                topologicalSortUtil(neighbor, visited, stack);
            }
        }

        stack.push(v); // Push current vertex to stack which stores the result
    }

    // Function to perform topological sort
    private void topologicalSort() {
        Stack<Integer> stack = new Stack<>();
        boolean visited[] = new boolean[V]; // Mark all the vertices as not visited

        Arrays.fill(visited, false);

        // Call the recursive helper function to store topological sort
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, stack);
            }
        }

        System.out.println("Topological Sort:");
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " "); // Print contents of stack
        }
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);

        // Input number of vertices
        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();

        TopologicalSort g = new TopologicalSort(V);

        // Input adjacency matrix
        System.out.println("Enter the adjacency matrix:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (scanner.nextInt() == 1) {
                    g.addEdge(i, j); // Add an edge from vertex i to vertex j
                }
            }
        }

        g.topologicalSort(); // Perform topological sort

        scanner.close(); // Close the scanner
    }
}

Enter the number of vertices: 6
Enter the adjacency matrix:
0 1 0 0 0 1
0 0 1 1 0 0
0 0 0 0 1 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 1 0 0
Topological Sort: 0 5 1 3 2 4