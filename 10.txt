
import java.util.Scanner;

public class Kruskal {

    int[] parent; // To keep track of the parent of each vertex
    int[][] a;    // Adjacency matrix for the graph
    int n;        // Number of vertices

    // Constructor to initialize the number of vertices and arrays
    public Kruskal(int n) {
        this.n = n;
        parent = new int[n + 1]; // Adjust size for 1-based index
        a = new int[n + 1][n + 1]; // Adjacency matrix
    }

    // Function to find the parent of a vertex
    int find(int m) {
        int p = m;
        while (parent[p] != 0) {
            p = parent[p];
        }
        return p;
    }

    // Union function to connect two vertices
    void union(int i, int j) {
        if (i != j) {
            parent[j] = i; // Make j a child of i
        }
    }

    // Function to implement Kruskal's Algorithm
    void kruskal() {
        int u = -1, v = -1, min;
        int sum = 0;
        int k = 0;

        // Count the edges and find the minimum spanning tree
        while (k < n - 1) {
            min = Integer.MAX_VALUE; // Reset minimum weight

            // Find the minimum weight edge
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if (a[i][j] < min && find(i) != find(j) && i != j) {
                        min = a[i][j];
                        u = i;
                        v = j;
                    }
                }
            }

            // Perform union and add edge to MST if no cycle is formed
            int rootU = find(u);
            int rootV = find(v);
            if (rootU != rootV) {
                union(rootU, rootV);
                System.out.println("(" + u + "," + v + ") = " + a[u][v]);
                sum += a[u][v]; // Add to total cost
                k++;
            }

            // Mark the edge as used
            a[u][v] = a[v][u] = Integer.MAX_VALUE; // Mark this edge as used
        }

        System.out.println("The cost of the minimum spanning tree = " + sum);
    }

    // Main method to execute the program
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the number of vertices of the graph:");
        int n = sc.nextInt();

        Kruskal k = new Kruskal(n);

        System.out.println("Enter the weighted adjacency matrix:");
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                k.a[i][j] = sc.nextInt();
            }
        }

        k.kruskal(); // Call the Kruskal function

        sc.close();
    }
}

Output
59
Enter the number of vertices of the graph:
4
Enter the weighted adjacency matrix:
1 2 3 4
4 5 6 7
7 4 1 2
8 9 7 2
(1,2) = 2
(3,4) = 2
(1,3) = 3
The cost of the minimum spanning tree = 7