
import java.util.Scanner;

public class Dijkstra {

    int[] d = new int[10];         // Distance array
    int[] p = new int[10];         // Predecessor array
    int[] visited = new int[10];   // Visited array

    public void dijk(int[][] a, int s, int n) {
        // Initialize distances, predecessor, and visited arrays
        for (int i = 0; i < n; i++) {
            d[i] = Integer.MAX_VALUE; // Set initial distance to infinity
            p[i] = -1;                // Set predecessor to -1
            visited[i] = 0;            // Mark all nodes as unvisited
        }
        d[s] = 0; // Distance to the source is 0

        for (int count = 0; count < n - 1; count++) {
            int u = -1;
            int min = Integer.MAX_VALUE;

            // Find the unvisited vertex with the smallest distance
            for (int j = 0; j < n; j++) {
                if (visited[j] == 0 && d[j] < min) {
                    min = d[j];
                    u = j;
                }
            }

            if (u == -1) {
                break; // If no vertex is found, break
            }
            visited[u] = 1; // Mark the selected vertex as visited

            // Update the distance to each neighboring vertex
            for (int v = 0; v < n; v++) {
                if (a[u][v] != 0 && visited[v] == 0) { // Check if there's an edge
                    if (d[u] + a[u][v] < d[v]) {
                        d[v] = d[u] + a[u][v]; // Update the distance
                        p[v] = u;              // Update predecessor
                    }
                }
            }
        }
    }

    void path(int v, int s) {
        if (p[v] != -1) {
            path(p[v], s); // Recursively print the path
        }
        if (v != s) {
            System.out.print(" -> " + v); // Print the vertex
        }
    }

    void display(int s, int n) {
        for (int i = 0; i < n; i++) {
            if (i != s) {
                System.out.print("Shortest path from " + s + " to " + i + ": " + s);
                path(i, s); // Print the path
                System.out.print(" = " + d[i]); // Print the distance
                System.out.println();           // New line
            }
        }
    }

    public static void main(String[] args) {
        int[][] a = new int[10][10]; // Adjacency matrix
        int i, j, n, s;

        System.out.println("Enter the number of vertices:");
        Scanner sc = new Scanner(System.in);

        n = sc.nextInt(); // Number of vertices

        System.out.println("Enter the weighted adjacency matrix (use 0 for no edge):");
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                a[i][j] = sc.nextInt(); // Input adjacency matrix
            }
        }

        System.out.println("Enter the source vertex (0 to " + (n - 1) + "):");
        s = sc.nextInt(); // Source vertex

        Dijkstra tr = new Dijkstra();
        tr.dijk(a, s, n); // Run Dijkstra's algorithm
        System.out.println("The shortest paths from source " + s + " to remaining vertices are:");
        tr.display(s, n); // Display the results

        sc.close();
    }
}

Output
Enter the number of vertices:
3
Enter the weighted adjacency matrix (use 0 for no edge):
1 4 7
7 8 9
4 5 6
Enter the source vertex (0 to 2):
2
The shortest paths from source 2 to remaining vertices are:
Shortest path from 2 to 0: 2 -> 0 = 4
Shortest path from 2 to 1: 2 -> 1 = 5