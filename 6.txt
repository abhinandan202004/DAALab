
import java.util.Random;
import java.util.Scanner;

class HeapSort {

    /* Function to heapify a subtree. Here 'i' is the index of root node in array a[], and 'n' is the size of heap. */
    static void heapify(int a[], int n, int i) {
        int largest = i; // Initialize largest as root
        int left = 2 * i + 1; // left child
        int right = 2 * i + 2; // right child

        // If left child is larger than root
        if (left < n && a[left] > a[largest]) {
            largest = left;
        }

        // If right child is larger than root
        if (right < n && a[right] > a[largest]) {
            largest = right;
        }

        // If root is not largest
        if (largest != i) {
            // swap a[i] with a[largest]
            int temp = a[i];
            a[i] = a[largest];
            a[largest] = temp;

            // Recursively heapify the affected subtree
            heapify(a, n, largest);
        }
    }

    /* Function to implement the heap sort */
    static void heapSort(int a[], int n) {
        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(a, n, i);
        }

        // One by one extract an element from heap
        for (int i = n - 1; i >= 0; i--) {
            // Move current root element to end
            int temp = a[0];
            a[0] = a[i];
            a[i] = temp;

            // call max heapify on the reduced heap
            heapify(a, i, 0);
        }
    }

    static void printArr(int a[], int n) {
        for (int i = 0; i < n; ++i) {
            System.out.print(a[i] + " ");
        }
    }

    public static void main(String args[]) {
        Scanner a = new Scanner(System.in);
        Random rand = new Random();
        System.out.println("Enter value of n:");
        int n = a.nextInt();
        int[] arr = new int[n];

        // Fill the array with random values
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rand.nextInt(100); // Random values between 0 and 99
        }

        long start = System.nanoTime(); // Start time
        heapSort(arr, n); // Call heap sort
        long end = System.nanoTime(); // End time
        long exe = end - start; // Execution time

        System.out.println("Execution time = " + exe + " ns");
        System.out.println("Sorted array:");

        for (int num : arr) {
            System.out.println(num);
        }

        a.close(); // Close the scanner
    }
}

Output
Enter value of n:
5
Execution time = 6100 ns
Sorted array:
18
21
39
81
96
PS D:\development\Java DAA> java 6.java
Enter value of n:
10
Execution time = 7800 ns
Sorted array:
14
30
52
71
74
81
83
89
90
99
40
Enter value of n:
15
Execution time = 9300 ns
Sorted array:
7
26
34
35
37
41
45
46
50
70
83
87
92
99
99
Enter value of n:
20
Execution time = 17000 ns
Sorted array:
1
12
20
41
42
47
51
52
53
57
60
66
71
76
78
83
83
87
96
97
Enter value of n:
25
Execution time = 20300 ns
Sorted array:
14
32
38
41
39
39
40
49
52
54
54
55
59
60
65
65
67
68
70
74
77
84
85
86
88
95