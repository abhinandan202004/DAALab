
import java.util.Arrays;
import java.util.Scanner;
import java.util.*;

public class QuickSort {

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int partitionIndex = partition(arr, low, high);
            quickSort(arr, low, partitionIndex - 1);
            quickSort(arr, partitionIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];

        arr[high] = temp;
        return i + 1;
    }

    public static void main(String[] args) {
        Scanner a = new Scanner(System.in);
        Random rand = new Random();
        System.out.println("enter value of n:");
        int n = a.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rand.nextInt(100);
        }
        System.out.println("Original array: " + Arrays.toString(arr));
        long startTime = System.nanoTime();
        quickSort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();
        System.out.println("Sorted array: " + Arrays.toString(arr));
        double timeElapsed = (endTime - startTime) ;
        System.out.println("Time complexity: " + timeElapsed + " milliseconds");
        a.close();
    }
}

OUTPUT
enter value of n:
10
Original array: [41, 35, 99, 17, 11, 73, 4, 86, 25, 12]
Sorted array: [4, 11, 12, 17, 25, 35, 41, 73, 86, 99]
Time complexity: 0.0139 milliseconds
enter value of n:
15
Original array: [97, 72, 50, 88, 2, 24, 17, 39, 69, 87, 30, 42, 63, 92, 1]
Sorted array: [1, 2, 17, 24, 30, 39, 42, 50, 63, 69, 72, 87, 88, 92, 97]
Time complexity: 0.0159 milliseconds
15
enter value of n:
20
Original array: [34, 79, 52, 76, 7, 39, 29, 31, 65, 36, 62, 64, 95, 24, 52, 67, 66, 30, 11, 61]
Sorted array: [7, 11, 24, 29, 30, 31, 34, 36, 39, 52, 52, 61, 62, 64, 65, 66, 67, 76, 79, 95]
Time complexity: 0.0161 milliseconds
enter value of n:
25
Original array: [13, 65, 93, 51, 89, 68, 8, 80, 45, 58, 36, 46, 2, 15, 63, 22, 51, 98, 97, 48, 33, 5, 74, 2, 66]
Sorted array: [2, 2, 5, 8, 13, 15, 22, 33, 36, 45, 46, 48, 51, 51, 58, 63, 65, 66, 68, 74, 80, 89, 93, 97, 98]
Time complexity: 0.0197 milliseconds